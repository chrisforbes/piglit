[require]
GLSL >= 1.50
GL_ARB_fragment_layer_viewport
GL_ARB_shader_atomic_counters

#
# Ensure that the fragment stage reads the same value for gl_ViewportIndex  as was
# written by the geometry stage.
#
# This test covers the case where the value written is out of range.
#

[vertex shader]
#version 150
in vec4 piglit_vertex;

void main()
{
	gl_Position = piglit_vertex;
}

[geometry shader]
#version 150
#extension GL_ARB_viewport_array: require

layout(triangles) in;
layout(triangle_strip, max_vertices=9) out;

const int vps[] = int[]( -1, 16, 2048 );
flat out int vp_written;

void main()
{
	for (int vp = 0; vp < vps.length(); vp++) {

		for (int i = 0; i < 3; i++) {
			gl_Position = gl_in[i].gl_Position;
			vp_written = vps[vp];
			gl_ViewportIndex = vps[vp];
			EmitVertex();
		}

		EndPrimitive();
	}
}

[fragment shader]
#version 150
#extension GL_ARB_fragment_layer_viewport: require
#extension GL_ARB_shader_atomic_counters: require

flat in int vp_written;

layout(binding = 0) uniform atomic_uint mismatches;

void main()
{
	if (vp_written != gl_ViewportIndex)
		atomicCounterIncrement(mismatches);

	gl_FragColor = vec4(0);
}

[test]
texture junk 2DArray 0 ( 64 , 64 , 1 )
fb tex layered 2DArray 0

atomic counters 1


draw rect -1 -1 2 2

probe atomic counter 0 == 0
